{"version":3,"file":"cascader.service.d.ts","sources":["cascader.service.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\nimport { OnDestroy } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzCascaderComponentAsSource, NzCascaderOption, NzCascaderSearchOption } from './typings';\r\n/**\r\n * All data is stored and parsed in NzCascaderService.\r\n */\r\nexport declare class NzCascaderService implements OnDestroy {\r\n    /** Activated options in each column. */\r\n    activatedOptions: NzCascaderOption[];\r\n    /** An array to store cascader items arranged in different layers. */\r\n    columns: NzCascaderOption[][];\r\n    /** If user has entered searching mode. */\r\n    inSearchingMode: boolean;\r\n    /** Selected options would be output to user. */\r\n    selectedOptions: NzCascaderOption[];\r\n    values: NzSafeAny[];\r\n    readonly $loading: BehaviorSubject<boolean>;\r\n    /**\r\n     * Emit an event to notify cascader it needs to redraw because activated or\r\n     * selected options are changed.\r\n     */\r\n    readonly $redraw: Subject<void>;\r\n    /**\r\n     * Emit an event when an option gets selected.\r\n     * Emit true if a leaf options is selected.\r\n     */\r\n    readonly $optionSelected: Subject<{\r\n        option: NzCascaderOption;\r\n        index: number;\r\n    } | null>;\r\n    /**\r\n     * Emit an event to notify cascader it needs to quit searching mode.\r\n     * Only emit when user do select a searching option.\r\n     */\r\n    readonly $quitSearching: Subject<void>;\r\n    /** To hold columns before entering searching mode. */\r\n    private columnsSnapshot;\r\n    /** To hold activated options before entering searching mode. */\r\n    private activatedOptionsSnapshot;\r\n    private cascaderComponent;\r\n    /** Return cascader options in the first layer. */\r\n    get nzOptions(): NzCascaderOption[];\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Make sure that value matches what is displayed in the dropdown.\r\n     */\r\n    syncOptions(first?: boolean): void;\r\n    /**\r\n     * Bind cascader component so this service could use inputs.\r\n     */\r\n    withComponent(cascaderComponent: NzCascaderComponentAsSource): void;\r\n    /**\r\n     * Reset all options. Rebuild searching options if in searching mode.\r\n     */\r\n    withOptions(options: NzCascaderOption[] | null): void;\r\n    /**\r\n     * Try to set a option as activated.\r\n     *\r\n     * @param option Cascader option\r\n     * @param columnIndex Of which column this option is in\r\n     * @param performSelect Select\r\n     * @param loadingChildren Try to load children asynchronously.\r\n     */\r\n    setOptionActivated(option: NzCascaderOption, columnIndex: number, performSelect?: boolean, loadingChildren?: boolean): void;\r\n    setOptionSelected(option: NzCascaderOption, index: number): void;\r\n    setOptionDeactivatedSinceColumn(column: number): void;\r\n    /**\r\n     * Set a searching option as selected, finishing up things.\r\n     *\r\n     * @param option\r\n     */\r\n    setSearchOptionSelected(option: NzCascaderSearchOption): void;\r\n    /**\r\n     * Filter cascader options to reset `columns`.\r\n     *\r\n     * @param searchValue The string user wants to search.\r\n     */\r\n    prepareSearchOptions(searchValue: string): void;\r\n    /**\r\n     * Toggle searching mode by UI. It deals with things not directly related to UI.\r\n     *\r\n     * @param toSearching If this cascader is entering searching mode\r\n     */\r\n    toggleSearchingMode(toSearching: boolean): void;\r\n    /**\r\n     * Clear selected options.\r\n     */\r\n    clear(): void;\r\n    getOptionLabel(o: NzCascaderOption): string;\r\n    getOptionValue(o: NzCascaderOption): NzSafeAny;\r\n    /**\r\n     * Try to insert options into a column.\r\n     *\r\n     * @param options Options to insert\r\n     * @param columnIndex Position\r\n     */\r\n    private setColumnData;\r\n    /**\r\n     * Set all ancestor options as activated.\r\n     */\r\n    private trackAncestorActivatedOptions;\r\n    private dropBehindActivatedOptions;\r\n    private dropBehindColumns;\r\n    /**\r\n     * Load children of an option asynchronously.\r\n     */\r\n    loadChildren(option: NzCascaderOption | NzSafeAny, columnIndex: number, success?: VoidFunction, failure?: VoidFunction): void;\r\n    private isLoaded;\r\n    /**\r\n     * Find a option that has a given value in a given column.\r\n     */\r\n    private findOptionWithValue;\r\n    private prepareEmitValue;\r\n}\r\n"]}