{"version":3,"file":"resize-observer.service.d.ts","sources":["resize-observer.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\nimport { ElementRef, OnDestroy } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\r\n */\r\nexport declare class NzResizeObserverFactory {\r\n    create(callback: ResizeObserverCallback): ResizeObserver | null;\r\n}\r\n/** An injectable service that allows watching elements for changes to their content. */\r\nexport declare class NzResizeObserver implements OnDestroy {\r\n    private nzResizeObserverFactory;\r\n    /** Keeps track of the existing ResizeObservers so they can be reused. */\r\n    private observedElements;\r\n    constructor(nzResizeObserverFactory: NzResizeObserverFactory);\r\n    ngOnDestroy(): void;\r\n    observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]>;\r\n    /**\r\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\r\n     * new one if not.\r\n     */\r\n    private observeElement;\r\n    /**\r\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\r\n     * observing this element.\r\n     */\r\n    private unobserveElement;\r\n    /** Clean up the underlying ResizeObserver for the specified element. */\r\n    private cleanupObserver;\r\n}\r\n"]}