{"version":3,"file":"slider.component.d.ts","sources":["slider.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { BooleanInput, NumberInput } from 'ng-zorro-antd/core/types';\r\nimport { NzSliderHandleComponent } from './handle.component';\r\nimport { NzSliderService } from './slider.service';\r\nimport { NzExtendedMark, NzMarks, NzSliderHandler, NzSliderShowTooltip, NzSliderValue } from './typings';\r\nexport declare class NzSliderComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {\r\n    private sliderService;\r\n    private cdr;\r\n    private platform;\r\n    private directionality;\r\n    static ngAcceptInputType_nzDisabled: BooleanInput;\r\n    static ngAcceptInputType_nzDots: BooleanInput;\r\n    static ngAcceptInputType_nzIncluded: BooleanInput;\r\n    static ngAcceptInputType_nzRange: BooleanInput;\r\n    static ngAcceptInputType_nzVertical: BooleanInput;\r\n    static ngAcceptInputType_nzMax: NumberInput;\r\n    static ngAcceptInputType_nzMin: NumberInput;\r\n    static ngAcceptInputType_nzStep: NumberInput;\r\n    static ngAcceptInputType_nzReverse: BooleanInput;\r\n    slider: ElementRef<HTMLDivElement>;\r\n    handlerComponents: QueryList<NzSliderHandleComponent>;\r\n    nzDisabled: boolean;\r\n    nzDots: boolean;\r\n    nzIncluded: boolean;\r\n    nzRange: boolean;\r\n    nzVertical: boolean;\r\n    nzReverse: boolean;\r\n    nzDefaultValue?: NzSliderValue;\r\n    nzMarks: NzMarks | null;\r\n    nzMax: number;\r\n    nzMin: number;\r\n    nzStep: number;\r\n    nzTooltipVisible: NzSliderShowTooltip;\r\n    nzTooltipPlacement: string;\r\n    nzTipFormatter?: null | ((value: number) => string);\r\n    readonly nzOnAfterChange: EventEmitter<NzSliderValue>;\r\n    value: NzSliderValue | null;\r\n    cacheSliderStart: number | null;\r\n    cacheSliderLength: number | null;\r\n    activeValueIndex: number | undefined;\r\n    track: {\r\n        offset: null | number;\r\n        length: null | number;\r\n    };\r\n    handles: NzSliderHandler[];\r\n    marksArray: NzExtendedMark[] | null;\r\n    bounds: {\r\n        lower: NzSliderValue | null;\r\n        upper: NzSliderValue | null;\r\n    };\r\n    dir: Direction;\r\n    private dragStart$?;\r\n    private dragMove$?;\r\n    private dragEnd$?;\r\n    private dragStart_?;\r\n    private dragMove_?;\r\n    private dragEnd_?;\r\n    private destroy$;\r\n    constructor(sliderService: NzSliderService, cdr: ChangeDetectorRef, platform: Platform, directionality: Directionality);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    writeValue(val: NzSliderValue | null): void;\r\n    onValueChange(_value: NzSliderValue): void;\r\n    onTouched(): void;\r\n    registerOnChange(fn: (value: NzSliderValue) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    /**\r\n     * Event handler is only triggered when a slider handler is focused.\r\n     */\r\n    onKeyDown(e: KeyboardEvent): void;\r\n    onHandleFocusIn(index: number): void;\r\n    private setValue;\r\n    private getValue;\r\n    /**\r\n     * Clone & sort current value and convert them to offsets, then return the new one.\r\n     */\r\n    private getValueToOffset;\r\n    /**\r\n     * Find the closest value to be activated.\r\n     */\r\n    private setActiveValueIndex;\r\n    private setActiveValue;\r\n    /**\r\n     * Update track and handles' position and length.\r\n     */\r\n    private updateTrackAndHandles;\r\n    private onDragStart;\r\n    private onDragMove;\r\n    private getLogicalValue;\r\n    private onDragEnd;\r\n    /**\r\n     * Create user interactions handles.\r\n     */\r\n    private bindDraggingHandlers;\r\n    private subscribeDrag;\r\n    private unsubscribeDrag;\r\n    private toggleDragMoving;\r\n    private toggleDragDisabled;\r\n    private findClosestValue;\r\n    private valueToOffset;\r\n    private getSliderStartPosition;\r\n    private getSliderLength;\r\n    /**\r\n     * Cache DOM layout/reflow operations for performance (may not necessary?)\r\n     */\r\n    private cacheSliderProperty;\r\n    private formatValue;\r\n    /**\r\n     * Show one handle's tooltip and hide others'.\r\n     */\r\n    private showHandleTooltip;\r\n    private hideAllHandleTooltip;\r\n    private generateMarkItems;\r\n}\r\n"]}