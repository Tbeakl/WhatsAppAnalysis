{"version":3,"file":"cascader.component.d.ts","sources":["cascader.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { CdkConnectedOverlay, ConnectionPositionPair } from '@angular/cdk/overlay';\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NzConfigKey, NzConfigService } from 'ng-zorro-antd/core/config';\r\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\r\nimport { BooleanInput, NgClassType, NgStyleInterface, NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzCascaderI18nInterface, NzI18nService } from 'ng-zorro-antd/i18n';\r\nimport { NzCascaderOptionComponent } from './cascader-li.component';\r\nimport { NzCascaderService } from './cascader.service';\r\nimport { NzCascaderComponentAsSource, NzCascaderExpandTrigger, NzCascaderOption, NzCascaderSize, NzCascaderTriggerType, NzShowSearchOptions } from './typings';\r\nexport declare class NzCascaderComponent implements NzCascaderComponentAsSource, OnInit, OnDestroy, ControlValueAccessor {\r\n    cascaderService: NzCascaderService;\r\n    nzConfigService: NzConfigService;\r\n    private cdr;\r\n    private i18nService;\r\n    private directionality;\r\n    noAnimation?: NzNoAnimationDirective | undefined;\r\n    readonly _nzModuleName: NzConfigKey;\r\n    static ngAcceptInputType_nzShowInput: BooleanInput;\r\n    static ngAcceptInputType_nzShowArrow: BooleanInput;\r\n    static ngAcceptInputType_nzAllowClear: BooleanInput;\r\n    static ngAcceptInputType_nzAutoFocus: BooleanInput;\r\n    static ngAcceptInputType_nzChangeOnSelect: BooleanInput;\r\n    static ngAcceptInputType_nzDisabled: BooleanInput;\r\n    input: ElementRef;\r\n    menu: ElementRef;\r\n    overlay: CdkConnectedOverlay;\r\n    cascaderItems: QueryList<NzCascaderOptionComponent>;\r\n    nzOptionRender: TemplateRef<{\r\n        $implicit: NzCascaderOption;\r\n        index: number;\r\n    }> | null;\r\n    nzShowInput: boolean;\r\n    nzShowArrow: boolean;\r\n    nzAllowClear: boolean;\r\n    nzAutoFocus: boolean;\r\n    nzChangeOnSelect: boolean;\r\n    nzDisabled: boolean;\r\n    nzColumnClassName?: string;\r\n    nzExpandTrigger: NzCascaderExpandTrigger;\r\n    nzValueProperty: string;\r\n    nzLabelRender: TemplateRef<void> | null;\r\n    nzLabelProperty: string;\r\n    nzNotFoundContent?: string | TemplateRef<void>;\r\n    nzSize: NzCascaderSize;\r\n    nzBackdrop: boolean;\r\n    nzShowSearch: boolean | NzShowSearchOptions;\r\n    nzPlaceHolder: string;\r\n    nzMenuClassName?: string;\r\n    nzMenuStyle: NgStyleInterface | null;\r\n    nzMouseEnterDelay: number;\r\n    nzMouseLeaveDelay: number;\r\n    nzTriggerAction: NzCascaderTriggerType | NzCascaderTriggerType[];\r\n    nzChangeOn?: (option: NzCascaderOption, level: number) => boolean;\r\n    nzLoadData?: (node: NzCascaderOption, index: number) => PromiseLike<NzSafeAny>;\r\n    nzSuffixIcon: string | TemplateRef<void>;\r\n    nzExpandIcon: string | TemplateRef<void>;\r\n    get nzOptions(): NzCascaderOption[] | null;\r\n    set nzOptions(options: NzCascaderOption[] | null);\r\n    readonly nzVisibleChange: EventEmitter<boolean>;\r\n    readonly nzSelectionChange: EventEmitter<NzCascaderOption[]>;\r\n    readonly nzSelect: EventEmitter<{\r\n        option: NzCascaderOption;\r\n        index: number;\r\n    } | null>;\r\n    readonly nzClear: EventEmitter<void>;\r\n    /**\r\n     * If the dropdown should show the empty content.\r\n     * `true` if there's no options.\r\n     */\r\n    shouldShowEmpty: boolean;\r\n    el: HTMLElement;\r\n    menuVisible: boolean;\r\n    isLoading: boolean;\r\n    labelRenderText?: string;\r\n    labelRenderContext: {};\r\n    onChange: Function;\r\n    onTouched: Function;\r\n    positions: ConnectionPositionPair[];\r\n    /**\r\n     * Dropdown's with in pixel.\r\n     */\r\n    dropdownWidthStyle?: string;\r\n    dropdownHeightStyle: 'auto' | '';\r\n    isFocused: boolean;\r\n    locale: NzCascaderI18nInterface;\r\n    dir: Direction;\r\n    private destroy$;\r\n    private inputString;\r\n    private isOpening;\r\n    private delayMenuTimer;\r\n    private delaySelectTimer;\r\n    get inSearchingMode(): boolean;\r\n    set inputValue(inputValue: string);\r\n    get inputValue(): string;\r\n    get menuCls(): NgClassType;\r\n    get menuColumnCls(): NgClassType;\r\n    private get hasInput();\r\n    private get hasValue();\r\n    get showPlaceholder(): boolean;\r\n    get clearIconVisible(): boolean;\r\n    get isLabelRenderTemplate(): boolean;\r\n    constructor(cascaderService: NzCascaderService, nzConfigService: NzConfigService, cdr: ChangeDetectorRef, i18nService: NzI18nService, elementRef: ElementRef, renderer: Renderer2, directionality: Directionality, noAnimation?: NzNoAnimationDirective | undefined);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    registerOnChange(fn: () => {}): void;\r\n    registerOnTouched(fn: () => {}): void;\r\n    writeValue(value: NzSafeAny): void;\r\n    delaySetMenuVisible(visible: boolean, delay?: number, setOpening?: boolean): void;\r\n    setMenuVisible(visible: boolean): void;\r\n    private clearDelayMenuTimer;\r\n    clearSelection(event?: Event): void;\r\n    getSubmitValue(): NzSafeAny[];\r\n    focus(): void;\r\n    blur(): void;\r\n    handleInputBlur(): void;\r\n    handleInputFocus(): void;\r\n    onKeyDown(event: KeyboardEvent): void;\r\n    onTriggerClick(): void;\r\n    onTriggerMouseEnter(): void;\r\n    onTriggerMouseLeave(event: MouseEvent): void;\r\n    onOptionMouseEnter(option: NzCascaderOption, columnIndex: number, event: Event): void;\r\n    onOptionMouseLeave(option: NzCascaderOption, _columnIndex: number, event: Event): void;\r\n    onOptionClick(option: NzCascaderOption, columnIndex: number, event: Event): void;\r\n    onClickOutside(event: MouseEvent): void;\r\n    private isActionTrigger;\r\n    private onEnter;\r\n    private moveUpOrDown;\r\n    private moveLeft;\r\n    private moveRight;\r\n    private clearDelaySelectTimer;\r\n    private delaySetOptionActivated;\r\n    private toggleSearchingMode;\r\n    isOptionActivated(option: NzCascaderOption, index: number): boolean;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    closeMenu(): void;\r\n    /**\r\n     * Reposition the cascader panel. When a menu opens, the cascader expands\r\n     * and may exceed the boundary of browser's window.\r\n     */\r\n    private reposition;\r\n    /**\r\n     * When a cascader options is changed, a child needs to know that it should re-render.\r\n     */\r\n    private checkChildren;\r\n    private setDisplayLabel;\r\n    private setDropdownStyles;\r\n    private setLocale;\r\n    private scrollToActivatedOptions;\r\n}\r\n"]}